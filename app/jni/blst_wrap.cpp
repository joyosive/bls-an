/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
# include <memory>
# include "blst.hpp"
using namespace blst;
#else
# include "blst.h"
#endif

static const char *const BLST_ERROR_str [] = {
    "BLST_ERROR: success",
    "BLST_ERROR: bad point encoding",
    "BLST_ERROR: point is not on curve",
    "BLST_ERROR: point is not in group",
    "BLST_ERROR: context type mismatch",
    "BLST_ERROR: verify failed",
    "BLST_ERROR: public key is infinite",
};

#define SWIG_PYTHON_STRICT_BYTE_CHAR

#ifdef _WIN32
# include <malloc.h>
# ifndef alloca
#  define alloca(s) _alloca(s)
# endif
#endif


#if defined(__MINGW32__) && defined(__int64)
# undef __int64
#endif



#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <typeinfo>
#include <stdexcept>


#include <string>


#include <stdint.h>		// Use the C99 official header


#ifdef __cplusplus
# define JCALL(func, ...) jenv->func(__VA_ARGS__)
#else
# define JCALL(func, ...) (*jenv)->func(jenv, __VA_ARGS__)
#endif


#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif

SWIGINTERN blst::Pairing *new_blst_Pairing(bool hash_or_encode,std::string const &DST){   size_t sz = blst_pairing_sizeof();
        size_t SZ = (sz + DST.size() + sizeof(jlong) - 1)/sizeof(jlong);
        blst_pairing *ret = (blst_pairing *)malloc(SZ*sizeof(jlong));
        if (DST.size() != 0) {
            byte *dst = (byte *)ret + sz;
            memcpy(dst, DST.data(), DST.size());
            blst_pairing_init(ret, hash_or_encode, dst, DST.size());
        } else {
            blst_pairing_init(ret, hash_or_encode, NULL, 0);
        }
        return (Pairing *)ret;
    }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_SecretKey_1keygen_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jbyteArray jarg2, jstring jarg4) {
  blst::SecretKey *arg1 = (blst::SecretKey *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::SecretKey *)JCALL(GetLongArrayElements, jarg1, 0);
  
  {
    if (jarg2) {
      arg2 = (byte *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->keygen((byte const *)arg2,arg3,(std::string const &)*arg4);
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, JNI_ABORT);
  }
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_SecretKey_1keygen_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jbyteArray jarg2) {
  blst::SecretKey *arg1 = (blst::SecretKey *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::SecretKey *)JCALL(GetLongArrayElements, jarg1, 0);
  
  {
    if (jarg2) {
      arg2 = (byte *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  (arg1)->keygen((byte const *)arg2,arg3);
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, JNI_ABORT);
  }
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_SecretKey_1from_1bendian(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jbyteArray jarg2) {
  blst::SecretKey *arg1 = (blst::SecretKey *) 0 ;
  byte *arg2 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::SecretKey *)JCALL(GetLongArrayElements, jarg1, 0);
  
  {
    size_t sz = JCALL(GetArrayLength, jarg2);
    if (sz != 32) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException,
        "BLST_ERROR: input size mismatch");
      return ;
    }
    arg2 = (byte *)JCALL(GetByteArrayElements, jarg2, 0);
  }
  (arg1)->from_bendian((byte const (*))arg2);
  
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  if (jarg2) JCALL(ReleaseByteArrayElements, jarg2, (jbyte *)arg2, JNI_ABORT);
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_SecretKey_1from_1lendian(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jbyteArray jarg2) {
  blst::SecretKey *arg1 = (blst::SecretKey *) 0 ;
  byte *arg2 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::SecretKey *)JCALL(GetLongArrayElements, jarg1, 0);
  
  {
    size_t sz = JCALL(GetArrayLength, jarg2);
    if (sz != 32) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException,
        "BLST_ERROR: input size mismatch");
      return ;
    }
    arg2 = (byte *)JCALL(GetByteArrayElements, jarg2, 0);
  }
  (arg1)->from_lendian((byte const (*))arg2);
  
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  if (jarg2) JCALL(ReleaseByteArrayElements, jarg2, (jbyte *)arg2, JNI_ABORT);
  
}


SWIGEXPORT jbyteArray JNICALL Java_supranational_blst_blstJNI_SecretKey_1to_1bendian(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jbyteArray jresult = 0 ;
  blst::SecretKey *arg1 = (blst::SecretKey *) 0 ;
  byte *arg2 ;
  byte temp2[32] ;
  
  (void)jenv;
  (void)jcls;
  arg2 = temp2; 
  
  arg1 = jarg1 ? (blst::SecretKey *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  ((blst::SecretKey const *)arg1)->to_bendian(arg2);
  {
    jresult = JCALL(NewByteArray, 32);
    if (jresult != 0) {
      JCALL(SetByteArrayRegion, jresult, 0, 32, (const jbyte *)arg2);
    }
    
    
    
    
    
    
    
    
    
    
  }
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_supranational_blst_blstJNI_SecretKey_1to_1lendian(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jbyteArray jresult = 0 ;
  blst::SecretKey *arg1 = (blst::SecretKey *) 0 ;
  byte *arg2 ;
  byte temp2[32] ;
  
  (void)jenv;
  (void)jcls;
  arg2 = temp2; 
  
  arg1 = jarg1 ? (blst::SecretKey *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  ((blst::SecretKey const *)arg1)->to_lendian(arg2);
  {
    jresult = JCALL(NewByteArray, 32);
    if (jresult != 0) {
      JCALL(SetByteArrayRegion, jresult, 0, 32, (const jbyte *)arg2);
    }
    
    
    
    
    
    
    
    
    
    
  }
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_new_1SecretKey(JNIEnv *jenv, jclass jcls) {
  jlongArray jresult = 0 ;
  blst::SecretKey *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (blst::SecretKey *)new blst::SecretKey();
  
  if (result != 0) {
    size_t sz = (sizeof(blst::SecretKey) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)result);
  }
  
  delete result;
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_new_1Scalar_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlongArray jresult = 0 ;
  blst::Scalar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (blst::Scalar *)new blst::Scalar();
  
  if (result != 0) {
    size_t sz = (sizeof(blst::Scalar) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)result);
  }
  
  delete result;
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_new_1Scalar_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jlongArray jresult = 0 ;
  byte *arg1 = (byte *) 0 ;
  size_t arg2 ;
  blst::Scalar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg2 = JCALL(GetArrayLength, jarg1);
  arg1 = (byte *)alloca(arg2);
  JCALL(GetByteArrayRegion, jarg1, 0, arg2, (jbyte*)arg1);
  if (*(jbyte*)arg1 < 0) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException,
      "expecting unsigned value");
    return 0;
  }
  {
    // BigInteger.toByteArray() emits big-endian, flip the order...
    size_t i, j;
    for(i=0, j=arg2-1; i<arg2/2; i++, j--) {
      byte t=arg1[i]; arg1[i]=arg1[j]; arg1[j]=t;
    }
  }
  if (arg1[arg2-1] == 0)
  arg2--;
  arg2 *= 8;
  
  result = (blst::Scalar *)new blst::Scalar((byte const *)arg1,arg2);
  
  if (result != 0) {
    size_t sz = (sizeof(blst::Scalar) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)result);
  }
  
  
  delete result;
  return jresult;
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_Scalar_1from_1bendian(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jbyteArray jarg2) {
  blst::Scalar *arg1 = (blst::Scalar *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  blst::Scalar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::Scalar *)JCALL(GetLongArrayElements, jarg1, 0);
  
  {
    if (jarg2) {
      arg2 = (byte *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  result = (blst::Scalar *)(arg1)->from_bendian((byte const *)arg2,arg3);
  (void)result;
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, JNI_ABORT);
  }
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_Scalar_1from_1lendian(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jbyteArray jarg2) {
  blst::Scalar *arg1 = (blst::Scalar *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  blst::Scalar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::Scalar *)JCALL(GetLongArrayElements, jarg1, 0);
  
  {
    if (jarg2) {
      arg2 = (byte *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  result = (blst::Scalar *)(arg1)->from_lendian((byte const *)arg2,arg3);
  (void)result;
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, JNI_ABORT);
  }
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
}


SWIGEXPORT jbyteArray JNICALL Java_supranational_blst_blstJNI_Scalar_1to_1bendian(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jbyteArray jresult = 0 ;
  blst::Scalar *arg1 = (blst::Scalar *) 0 ;
  byte *arg2 ;
  byte temp2[32] ;
  
  (void)jenv;
  (void)jcls;
  arg2 = temp2; 
  
  arg1 = jarg1 ? (blst::Scalar *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  ((blst::Scalar const *)arg1)->to_bendian(arg2);
  {
    jresult = JCALL(NewByteArray, 32);
    if (jresult != 0) {
      JCALL(SetByteArrayRegion, jresult, 0, 32, (const jbyte *)arg2);
    }
    
    
    
    
    
    
    
    
    
    
  }
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_supranational_blst_blstJNI_Scalar_1to_1lendian(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jbyteArray jresult = 0 ;
  blst::Scalar *arg1 = (blst::Scalar *) 0 ;
  byte *arg2 ;
  byte temp2[32] ;
  
  (void)jenv;
  (void)jcls;
  arg2 = temp2; 
  
  arg1 = jarg1 ? (blst::Scalar *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  ((blst::Scalar const *)arg1)->to_lendian(arg2);
  {
    jresult = JCALL(NewByteArray, 32);
    if (jresult != 0) {
      JCALL(SetByteArrayRegion, jresult, 0, 32, (const jbyte *)arg2);
    }
    
    
    
    
    
    
    
    
    
    
  }
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_Scalar_1add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2) {
  blst::Scalar *arg1 = (blst::Scalar *) 0 ;
  blst::Scalar *arg2 = 0 ;
  blst::Scalar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::Scalar *)JCALL(GetLongArrayElements, jarg1, 0);
  
  
  arg2 = jarg2 ? (blst::Scalar *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  try {
    result = (blst::Scalar *)(arg1)->add((blst::Scalar const &)*arg2);
  } catch(BLST_ERROR &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
      BLST_ERROR_str[_e]);
    
  }
  (void)result;
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_Scalar_1add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2) {
  blst::Scalar *arg1 = (blst::Scalar *) 0 ;
  blst::SecretKey *arg2 = 0 ;
  blst::Scalar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::Scalar *)JCALL(GetLongArrayElements, jarg1, 0);
  
  
  arg2 = jarg2 ? (blst::SecretKey *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  try {
    result = (blst::Scalar *)(arg1)->add((blst::SecretKey const &)*arg2);
  } catch(BLST_ERROR &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
      BLST_ERROR_str[_e]);
    
  }
  (void)result;
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_Scalar_1sub(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2) {
  blst::Scalar *arg1 = (blst::Scalar *) 0 ;
  blst::Scalar *arg2 = 0 ;
  blst::Scalar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::Scalar *)JCALL(GetLongArrayElements, jarg1, 0);
  
  
  arg2 = jarg2 ? (blst::Scalar *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  try {
    result = (blst::Scalar *)(arg1)->sub((blst::Scalar const &)*arg2);
  } catch(BLST_ERROR &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
      BLST_ERROR_str[_e]);
    
  }
  (void)result;
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_Scalar_1mul(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2) {
  blst::Scalar *arg1 = (blst::Scalar *) 0 ;
  blst::Scalar *arg2 = 0 ;
  blst::Scalar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::Scalar *)JCALL(GetLongArrayElements, jarg1, 0);
  
  
  arg2 = jarg2 ? (blst::Scalar *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  try {
    result = (blst::Scalar *)(arg1)->mul((blst::Scalar const &)*arg2);
  } catch(BLST_ERROR &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
      BLST_ERROR_str[_e]);
    
  }
  (void)result;
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_Scalar_1inverse(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  blst::Scalar *arg1 = (blst::Scalar *) 0 ;
  blst::Scalar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::Scalar *)JCALL(GetLongArrayElements, jarg1, 0);
  
  result = (blst::Scalar *)(arg1)->inverse();
  (void)result;
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_new_1P1_1Affine_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlongArray jresult = 0 ;
  blst::P1_Affine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (blst::P1_Affine *)new blst::P1_Affine();
  
  if (result != 0) {
    size_t sz = (sizeof(blst::P1_Affine) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)result);
  }
  
  delete result;
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_new_1P1_1Affine_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jlongArray jresult = 0 ;
  byte *arg1 = (byte *) 0 ;
  size_t arg2 ;
  blst::P1_Affine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (jarg1) {
      arg1 = (byte *) jenv->GetByteArrayElements(jarg1, 0);
      arg2 = (size_t) jenv->GetArrayLength(jarg1);
    } else {
      arg1 = 0;
      arg2 = 0;
    }
  }
  try {
    result = (blst::P1_Affine *)new blst::P1_Affine((byte const *)arg1,arg2);
  } catch(BLST_ERROR &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
      BLST_ERROR_str[_e]);
    
  }
  
  if (result != 0) {
    size_t sz = (sizeof(blst::P1_Affine) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)result);
  }
  
  {
    if (jarg1) jenv->ReleaseByteArrayElements(jarg1, (jbyte *)arg1, JNI_ABORT);
  }
  
  delete result;
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_new_1P1_1Affine_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jlongArray jresult = 0 ;
  blst::P1 *arg1 = 0 ;
  blst::P1_Affine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P1 *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  result = (blst::P1_Affine *)new blst::P1_Affine((blst::P1 const &)*arg1);
  
  if (result != 0) {
    size_t sz = (sizeof(blst::P1_Affine) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)result);
  }
  
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  delete result;
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_P1_1Affine_1to_1jacobian(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jlongArray jresult = 0 ;
  blst::P1_Affine *arg1 = (blst::P1_Affine *) 0 ;
  blst::P1 result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P1_Affine *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  result = ((blst::P1_Affine const *)arg1)->to_jacobian();
  {
    size_t sz = (sizeof(blst::P1) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)&result);
  }
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_supranational_blst_blstJNI_P1_1Affine_1serialize(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jbyteArray jresult = 0 ;
  blst::P1_Affine *arg1 = (blst::P1_Affine *) 0 ;
  byte *arg2 ;
  byte temp2[96] ;
  
  (void)jenv;
  (void)jcls;
  arg2 = temp2; 
  
  arg1 = jarg1 ? (blst::P1_Affine *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  ((blst::P1_Affine const *)arg1)->serialize(arg2);
  {
    jresult = JCALL(NewByteArray, 96);
    if (jresult != 0) {
      JCALL(SetByteArrayRegion, jresult, 0, 96, (const jbyte *)arg2);
    }
    
    
    
    
    
    
    
    
    
    
  }
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_supranational_blst_blstJNI_P1_1Affine_1compress(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jbyteArray jresult = 0 ;
  blst::P1_Affine *arg1 = (blst::P1_Affine *) 0 ;
  byte *arg2 ;
  byte temp2[48] ;
  
  (void)jenv;
  (void)jcls;
  arg2 = temp2; 
  
  arg1 = jarg1 ? (blst::P1_Affine *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  ((blst::P1_Affine const *)arg1)->compress(arg2);
  {
    jresult = JCALL(NewByteArray, 48);
    if (jresult != 0) {
      JCALL(SetByteArrayRegion, jresult, 0, 48, (const jbyte *)arg2);
    }
    
    
    
    
    
    
    
    
    
    
  }
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_supranational_blst_blstJNI_P1_1Affine_1on_1curve(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jboolean jresult = 0 ;
  blst::P1_Affine *arg1 = (blst::P1_Affine *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P1_Affine *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  result = (bool)((blst::P1_Affine const *)arg1)->on_curve();
  jresult = (jboolean)result; 
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_supranational_blst_blstJNI_P1_1Affine_1in_1group(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jboolean jresult = 0 ;
  blst::P1_Affine *arg1 = (blst::P1_Affine *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P1_Affine *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  result = (bool)((blst::P1_Affine const *)arg1)->in_group();
  jresult = (jboolean)result; 
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_supranational_blst_blstJNI_P1_1Affine_1is_1inf(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jboolean jresult = 0 ;
  blst::P1_Affine *arg1 = (blst::P1_Affine *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P1_Affine *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  result = (bool)((blst::P1_Affine const *)arg1)->is_inf();
  jresult = (jboolean)result; 
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_supranational_blst_blstJNI_P1_1Affine_1is_1equal(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2) {
  jboolean jresult = 0 ;
  blst::P1_Affine *arg1 = (blst::P1_Affine *) 0 ;
  blst::P1_Affine *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P1_Affine *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  
  arg2 = jarg2 ? (blst::P1_Affine *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  result = (bool)((blst::P1_Affine const *)arg1)->is_equal((blst::P1_Affine const &)*arg2);
  jresult = (jboolean)result; 
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_supranational_blst_blstJNI_P1_1Affine_1core_1verify_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2, jboolean jarg3, jbyteArray jarg4, jstring jarg6, jbyteArray jarg7) {
  jint jresult = 0 ;
  blst::P1_Affine *arg1 = (blst::P1_Affine *) 0 ;
  blst::P2_Affine *arg2 = 0 ;
  bool arg3 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  std::string *arg6 = 0 ;
  byte *arg7 = (byte *) 0 ;
  size_t arg8 ;
  BLST_ERROR result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P1_Affine *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  
  arg2 = jarg2 ? (blst::P2_Affine *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  arg3 = jarg3 ? true : false; 
  {
    if (jarg4) {
      arg4 = (byte *) jenv->GetByteArrayElements(jarg4, 0);
      arg5 = (size_t) jenv->GetArrayLength(jarg4);
    } else {
      arg4 = 0;
      arg5 = 0;
    }
  }
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  {
    if (jarg7) {
      arg7 = (byte *) jenv->GetByteArrayElements(jarg7, 0);
      arg8 = (size_t) jenv->GetArrayLength(jarg7);
    } else {
      arg7 = 0;
      arg8 = 0;
    }
  }
  result = (BLST_ERROR)((blst::P1_Affine const *)arg1)->core_verify((blst::P2_Affine const &)*arg2,arg3,(byte const *)arg4,arg5,(std::string const &)*arg6,(byte const *)arg7,arg8);
  jresult = (jint)result; 
  {
    if (jarg4) jenv->ReleaseByteArrayElements(jarg4, (jbyte *)arg4, JNI_ABORT);
  }
  {
    if (jarg7) jenv->ReleaseByteArrayElements(jarg7, (jbyte *)arg7, JNI_ABORT);
  }
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_supranational_blst_blstJNI_P1_1Affine_1core_1verify_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2, jboolean jarg3, jbyteArray jarg4, jstring jarg6) {
  jint jresult = 0 ;
  blst::P1_Affine *arg1 = (blst::P1_Affine *) 0 ;
  blst::P2_Affine *arg2 = 0 ;
  bool arg3 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  std::string *arg6 = 0 ;
  BLST_ERROR result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P1_Affine *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  
  arg2 = jarg2 ? (blst::P2_Affine *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  arg3 = jarg3 ? true : false; 
  {
    if (jarg4) {
      arg4 = (byte *) jenv->GetByteArrayElements(jarg4, 0);
      arg5 = (size_t) jenv->GetArrayLength(jarg4);
    } else {
      arg4 = 0;
      arg5 = 0;
    }
  }
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  result = (BLST_ERROR)((blst::P1_Affine const *)arg1)->core_verify((blst::P2_Affine const &)*arg2,arg3,(byte const *)arg4,arg5,(std::string const &)*arg6);
  jresult = (jint)result; 
  {
    if (jarg4) jenv->ReleaseByteArrayElements(jarg4, (jbyte *)arg4, JNI_ABORT);
  }
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_supranational_blst_blstJNI_P1_1Affine_1core_1verify_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2, jboolean jarg3, jbyteArray jarg4) {
  jint jresult = 0 ;
  blst::P1_Affine *arg1 = (blst::P1_Affine *) 0 ;
  blst::P2_Affine *arg2 = 0 ;
  bool arg3 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  BLST_ERROR result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P1_Affine *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  
  arg2 = jarg2 ? (blst::P2_Affine *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  arg3 = jarg3 ? true : false; 
  {
    if (jarg4) {
      arg4 = (byte *) jenv->GetByteArrayElements(jarg4, 0);
      arg5 = (size_t) jenv->GetArrayLength(jarg4);
    } else {
      arg4 = 0;
      arg5 = 0;
    }
  }
  result = (BLST_ERROR)((blst::P1_Affine const *)arg1)->core_verify((blst::P2_Affine const &)*arg2,arg3,(byte const *)arg4,arg5);
  jresult = (jint)result; 
  {
    if (jarg4) jenv->ReleaseByteArrayElements(jarg4, (jbyte *)arg4, JNI_ABORT);
  }
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
  
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_P1_1Affine_1generator(JNIEnv *jenv, jclass jcls) {
  jlongArray jresult = 0 ;
  blst::P1_Affine result;
  
  (void)jenv;
  (void)jcls;
  result = blst::P1_Affine::generator();
  {
    size_t sz = (sizeof(blst::P1_Affine) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)&result);
  }
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_new_1P1_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlongArray jresult = 0 ;
  blst::P1 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (blst::P1 *)new blst::P1();
  
  if (result != 0) {
    size_t sz = (sizeof(blst::P1) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)result);
  }
  
  delete result;
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_new_1P1_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jlongArray jresult = 0 ;
  blst::SecretKey *arg1 = 0 ;
  blst::P1 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::SecretKey *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  result = (blst::P1 *)new blst::P1((blst::SecretKey const &)*arg1);
  
  if (result != 0) {
    size_t sz = (sizeof(blst::P1) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)result);
  }
  
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  delete result;
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_new_1P1_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jlongArray jresult = 0 ;
  byte *arg1 = (byte *) 0 ;
  size_t arg2 ;
  blst::P1 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (jarg1) {
      arg1 = (byte *) jenv->GetByteArrayElements(jarg1, 0);
      arg2 = (size_t) jenv->GetArrayLength(jarg1);
    } else {
      arg1 = 0;
      arg2 = 0;
    }
  }
  try {
    result = (blst::P1 *)new blst::P1((byte const *)arg1,arg2);
  } catch(BLST_ERROR &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
      BLST_ERROR_str[_e]);
    
  }
  
  if (result != 0) {
    size_t sz = (sizeof(blst::P1) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)result);
  }
  
  {
    if (jarg1) jenv->ReleaseByteArrayElements(jarg1, (jbyte *)arg1, JNI_ABORT);
  }
  
  delete result;
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_new_1P1_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jlongArray jresult = 0 ;
  blst::P1_Affine *arg1 = 0 ;
  blst::P1 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P1_Affine *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  result = (blst::P1 *)new blst::P1((blst::P1_Affine const &)*arg1);
  
  if (result != 0) {
    size_t sz = (sizeof(blst::P1) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)result);
  }
  
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  delete result;
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_P1_1to_1affine(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jlongArray jresult = 0 ;
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  blst::P1_Affine result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P1 *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  result = ((blst::P1 const *)arg1)->to_affine();
  {
    size_t sz = (sizeof(blst::P1_Affine) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)&result);
  }
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_supranational_blst_blstJNI_P1_1serialize(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jbyteArray jresult = 0 ;
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  byte *arg2 ;
  byte temp2[96] ;
  
  (void)jenv;
  (void)jcls;
  arg2 = temp2; 
  
  arg1 = jarg1 ? (blst::P1 *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  ((blst::P1 const *)arg1)->serialize(arg2);
  {
    jresult = JCALL(NewByteArray, 96);
    if (jresult != 0) {
      JCALL(SetByteArrayRegion, jresult, 0, 96, (const jbyte *)arg2);
    }
    
    
    
    
    
    
    
    
    
    
  }
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_supranational_blst_blstJNI_P1_1compress(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jbyteArray jresult = 0 ;
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  byte *arg2 ;
  byte temp2[48] ;
  
  (void)jenv;
  (void)jcls;
  arg2 = temp2; 
  
  arg1 = jarg1 ? (blst::P1 *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  ((blst::P1 const *)arg1)->compress(arg2);
  {
    jresult = JCALL(NewByteArray, 48);
    if (jresult != 0) {
      JCALL(SetByteArrayRegion, jresult, 0, 48, (const jbyte *)arg2);
    }
    
    
    
    
    
    
    
    
    
    
  }
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_supranational_blst_blstJNI_P1_1on_1curve(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jboolean jresult = 0 ;
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P1 *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  result = (bool)((blst::P1 const *)arg1)->on_curve();
  jresult = (jboolean)result; 
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_supranational_blst_blstJNI_P1_1in_1group(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jboolean jresult = 0 ;
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P1 *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  result = (bool)((blst::P1 const *)arg1)->in_group();
  jresult = (jboolean)result; 
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_supranational_blst_blstJNI_P1_1is_1inf(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jboolean jresult = 0 ;
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P1 *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  result = (bool)((blst::P1 const *)arg1)->is_inf();
  jresult = (jboolean)result; 
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_supranational_blst_blstJNI_P1_1is_1equal(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2) {
  jboolean jresult = 0 ;
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  blst::P1 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P1 *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  
  arg2 = jarg2 ? (blst::P1 *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  result = (bool)((blst::P1 const *)arg1)->is_equal((blst::P1 const &)*arg2);
  jresult = (jboolean)result; 
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_P1_1aggregate(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2) {
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  blst::P1_Affine *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::P1 *)JCALL(GetLongArrayElements, jarg1, 0);
  
  
  arg2 = jarg2 ? (blst::P1_Affine *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  try {
    (arg1)->aggregate((blst::P1_Affine const &)*arg2);
  } catch(BLST_ERROR &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
      BLST_ERROR_str[_e]);
    
  }
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_P1_1sign_1with_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2) {
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  blst::SecretKey *arg2 = 0 ;
  blst::P1 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::P1 *)JCALL(GetLongArrayElements, jarg1, 0);
  
  
  arg2 = jarg2 ? (blst::SecretKey *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  result = (blst::P1 *)(arg1)->sign_with((blst::SecretKey const &)*arg2);
  (void)result;
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_P1_1sign_1with_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2) {
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  blst::Scalar *arg2 = 0 ;
  blst::P1 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::P1 *)JCALL(GetLongArrayElements, jarg1, 0);
  
  
  arg2 = jarg2 ? (blst::Scalar *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  result = (blst::P1 *)(arg1)->sign_with((blst::Scalar const &)*arg2);
  (void)result;
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_P1_1hash_1to_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jbyteArray jarg2, jstring jarg4, jbyteArray jarg5) {
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  byte *arg5 = (byte *) 0 ;
  size_t arg6 ;
  blst::P1 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::P1 *)JCALL(GetLongArrayElements, jarg1, 0);
  
  {
    if (jarg2) {
      arg2 = (byte *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    if (jarg5) {
      arg5 = (byte *) jenv->GetByteArrayElements(jarg5, 0);
      arg6 = (size_t) jenv->GetArrayLength(jarg5);
    } else {
      arg5 = 0;
      arg6 = 0;
    }
  }
  result = (blst::P1 *)(arg1)->hash_to((byte const *)arg2,arg3,(std::string const &)*arg4,(byte const *)arg5,arg6);
  (void)result;
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, JNI_ABORT);
  }
  {
    if (jarg5) jenv->ReleaseByteArrayElements(jarg5, (jbyte *)arg5, JNI_ABORT);
  }
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_P1_1hash_1to_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jbyteArray jarg2, jstring jarg4) {
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  blst::P1 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::P1 *)JCALL(GetLongArrayElements, jarg1, 0);
  
  {
    if (jarg2) {
      arg2 = (byte *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (blst::P1 *)(arg1)->hash_to((byte const *)arg2,arg3,(std::string const &)*arg4);
  (void)result;
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, JNI_ABORT);
  }
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_P1_1hash_1to_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jbyteArray jarg2) {
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  blst::P1 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::P1 *)JCALL(GetLongArrayElements, jarg1, 0);
  
  {
    if (jarg2) {
      arg2 = (byte *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  result = (blst::P1 *)(arg1)->hash_to((byte const *)arg2,arg3);
  (void)result;
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, JNI_ABORT);
  }
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_P1_1encode_1to_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jbyteArray jarg2, jstring jarg4, jbyteArray jarg5) {
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  byte *arg5 = (byte *) 0 ;
  size_t arg6 ;
  blst::P1 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::P1 *)JCALL(GetLongArrayElements, jarg1, 0);
  
  {
    if (jarg2) {
      arg2 = (byte *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    if (jarg5) {
      arg5 = (byte *) jenv->GetByteArrayElements(jarg5, 0);
      arg6 = (size_t) jenv->GetArrayLength(jarg5);
    } else {
      arg5 = 0;
      arg6 = 0;
    }
  }
  result = (blst::P1 *)(arg1)->encode_to((byte const *)arg2,arg3,(std::string const &)*arg4,(byte const *)arg5,arg6);
  (void)result;
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, JNI_ABORT);
  }
  {
    if (jarg5) jenv->ReleaseByteArrayElements(jarg5, (jbyte *)arg5, JNI_ABORT);
  }
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_P1_1encode_1to_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jbyteArray jarg2, jstring jarg4) {
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  blst::P1 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::P1 *)JCALL(GetLongArrayElements, jarg1, 0);
  
  {
    if (jarg2) {
      arg2 = (byte *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (blst::P1 *)(arg1)->encode_to((byte const *)arg2,arg3,(std::string const &)*arg4);
  (void)result;
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, JNI_ABORT);
  }
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_P1_1encode_1to_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jbyteArray jarg2) {
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  blst::P1 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::P1 *)JCALL(GetLongArrayElements, jarg1, 0);
  
  {
    if (jarg2) {
      arg2 = (byte *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  result = (blst::P1 *)(arg1)->encode_to((byte const *)arg2,arg3);
  (void)result;
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, JNI_ABORT);
  }
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_P1_1mult_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jbyteArray jarg2) {
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  blst::P1 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::P1 *)JCALL(GetLongArrayElements, jarg1, 0);
  
  
  arg3 = JCALL(GetArrayLength, jarg2);
  arg2 = (byte *)alloca(arg3);
  JCALL(GetByteArrayRegion, jarg2, 0, arg3, (jbyte*)arg2);
  if (*(jbyte*)arg2 < 0) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException,
      "expecting unsigned value");
    return ;
  }
  {
    // BigInteger.toByteArray() emits big-endian, flip the order...
    size_t i, j;
    for(i=0, j=arg3-1; i<arg3/2; i++, j--) {
      byte t=arg2[i]; arg2[i]=arg2[j]; arg2[j]=t;
    }
  }
  if (arg2[arg3-1] == 0)
  arg3--;
  arg3 *= 8;
  
  result = (blst::P1 *)(arg1)->mult((byte const *)arg2,arg3);
  (void)result;
  
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_P1_1mult_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2) {
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  blst::Scalar *arg2 = 0 ;
  blst::P1 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::P1 *)JCALL(GetLongArrayElements, jarg1, 0);
  
  
  arg2 = jarg2 ? (blst::Scalar *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  result = (blst::P1 *)(arg1)->mult((blst::Scalar const &)*arg2);
  (void)result;
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_P1_1cneg(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jboolean jarg2) {
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  bool arg2 ;
  blst::P1 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::P1 *)JCALL(GetLongArrayElements, jarg1, 0);
  
  arg2 = jarg2 ? true : false; 
  result = (blst::P1 *)(arg1)->cneg(arg2);
  (void)result;
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_P1_1neg(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  blst::P1 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::P1 *)JCALL(GetLongArrayElements, jarg1, 0);
  
  result = (blst::P1 *)(arg1)->neg();
  (void)result;
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_P1_1add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2) {
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  blst::P1 *arg2 = 0 ;
  blst::P1 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::P1 *)JCALL(GetLongArrayElements, jarg1, 0);
  
  
  arg2 = jarg2 ? (blst::P1 *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  result = (blst::P1 *)(arg1)->add((blst::P1 const &)*arg2);
  (void)result;
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_P1_1add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2) {
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  blst::P1_Affine *arg2 = 0 ;
  blst::P1 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::P1 *)JCALL(GetLongArrayElements, jarg1, 0);
  
  
  arg2 = jarg2 ? (blst::P1_Affine *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  result = (blst::P1 *)(arg1)->add((blst::P1_Affine const &)*arg2);
  (void)result;
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_P1_1dbl(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  blst::P1 *arg1 = (blst::P1 *) 0 ;
  blst::P1 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::P1 *)JCALL(GetLongArrayElements, jarg1, 0);
  
  result = (blst::P1 *)(arg1)->dbl();
  (void)result;
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_P1_1generator(JNIEnv *jenv, jclass jcls) {
  jlongArray jresult = 0 ;
  blst::P1 result;
  
  (void)jenv;
  (void)jcls;
  result = blst::P1::generator();
  {
    size_t sz = (sizeof(blst::P1) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)&result);
  }
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_new_1P2_1Affine_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlongArray jresult = 0 ;
  blst::P2_Affine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (blst::P2_Affine *)new blst::P2_Affine();
  
  if (result != 0) {
    size_t sz = (sizeof(blst::P2_Affine) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)result);
  }
  
  delete result;
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_new_1P2_1Affine_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jlongArray jresult = 0 ;
  byte *arg1 = (byte *) 0 ;
  size_t arg2 ;
  blst::P2_Affine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (jarg1) {
      arg1 = (byte *) jenv->GetByteArrayElements(jarg1, 0);
      arg2 = (size_t) jenv->GetArrayLength(jarg1);
    } else {
      arg1 = 0;
      arg2 = 0;
    }
  }
  try {
    result = (blst::P2_Affine *)new blst::P2_Affine((byte const *)arg1,arg2);
  } catch(BLST_ERROR &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
      BLST_ERROR_str[_e]);
    
  }
  
  if (result != 0) {
    size_t sz = (sizeof(blst::P2_Affine) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)result);
  }
  
  {
    if (jarg1) jenv->ReleaseByteArrayElements(jarg1, (jbyte *)arg1, JNI_ABORT);
  }
  
  delete result;
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_new_1P2_1Affine_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jlongArray jresult = 0 ;
  blst::P2 *arg1 = 0 ;
  blst::P2_Affine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P2 *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  result = (blst::P2_Affine *)new blst::P2_Affine((blst::P2 const &)*arg1);
  
  if (result != 0) {
    size_t sz = (sizeof(blst::P2_Affine) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)result);
  }
  
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  delete result;
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_P2_1Affine_1to_1jacobian(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jlongArray jresult = 0 ;
  blst::P2_Affine *arg1 = (blst::P2_Affine *) 0 ;
  blst::P2 result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P2_Affine *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  result = ((blst::P2_Affine const *)arg1)->to_jacobian();
  {
    size_t sz = (sizeof(blst::P2) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)&result);
  }
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_supranational_blst_blstJNI_P2_1Affine_1serialize(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jbyteArray jresult = 0 ;
  blst::P2_Affine *arg1 = (blst::P2_Affine *) 0 ;
  byte *arg2 ;
  byte temp2[192] ;
  
  (void)jenv;
  (void)jcls;
  arg2 = temp2; 
  
  arg1 = jarg1 ? (blst::P2_Affine *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  ((blst::P2_Affine const *)arg1)->serialize(arg2);
  {
    jresult = JCALL(NewByteArray, 192);
    if (jresult != 0) {
      JCALL(SetByteArrayRegion, jresult, 0, 192, (const jbyte *)arg2);
    }
    
    
    
    
    
    
    
    
    
    
  }
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_supranational_blst_blstJNI_P2_1Affine_1compress(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jbyteArray jresult = 0 ;
  blst::P2_Affine *arg1 = (blst::P2_Affine *) 0 ;
  byte *arg2 ;
  byte temp2[96] ;
  
  (void)jenv;
  (void)jcls;
  arg2 = temp2; 
  
  arg1 = jarg1 ? (blst::P2_Affine *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  ((blst::P2_Affine const *)arg1)->compress(arg2);
  {
    jresult = JCALL(NewByteArray, 96);
    if (jresult != 0) {
      JCALL(SetByteArrayRegion, jresult, 0, 96, (const jbyte *)arg2);
    }
    
    
    
    
    
    
    
    
    
    
  }
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_supranational_blst_blstJNI_P2_1Affine_1on_1curve(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jboolean jresult = 0 ;
  blst::P2_Affine *arg1 = (blst::P2_Affine *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P2_Affine *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  result = (bool)((blst::P2_Affine const *)arg1)->on_curve();
  jresult = (jboolean)result; 
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_supranational_blst_blstJNI_P2_1Affine_1in_1group(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jboolean jresult = 0 ;
  blst::P2_Affine *arg1 = (blst::P2_Affine *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P2_Affine *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  result = (bool)((blst::P2_Affine const *)arg1)->in_group();
  jresult = (jboolean)result; 
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_supranational_blst_blstJNI_P2_1Affine_1is_1inf(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jboolean jresult = 0 ;
  blst::P2_Affine *arg1 = (blst::P2_Affine *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P2_Affine *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  result = (bool)((blst::P2_Affine const *)arg1)->is_inf();
  jresult = (jboolean)result; 
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_supranational_blst_blstJNI_P2_1Affine_1is_1equal(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2) {
  jboolean jresult = 0 ;
  blst::P2_Affine *arg1 = (blst::P2_Affine *) 0 ;
  blst::P2_Affine *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P2_Affine *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  
  arg2 = jarg2 ? (blst::P2_Affine *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  result = (bool)((blst::P2_Affine const *)arg1)->is_equal((blst::P2_Affine const &)*arg2);
  jresult = (jboolean)result; 
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_supranational_blst_blstJNI_P2_1Affine_1core_1verify_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2, jboolean jarg3, jbyteArray jarg4, jstring jarg6, jbyteArray jarg7) {
  jint jresult = 0 ;
  blst::P2_Affine *arg1 = (blst::P2_Affine *) 0 ;
  blst::P1_Affine *arg2 = 0 ;
  bool arg3 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  std::string *arg6 = 0 ;
  byte *arg7 = (byte *) 0 ;
  size_t arg8 ;
  BLST_ERROR result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P2_Affine *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  
  arg2 = jarg2 ? (blst::P1_Affine *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  arg3 = jarg3 ? true : false; 
  {
    if (jarg4) {
      arg4 = (byte *) jenv->GetByteArrayElements(jarg4, 0);
      arg5 = (size_t) jenv->GetArrayLength(jarg4);
    } else {
      arg4 = 0;
      arg5 = 0;
    }
  }
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  {
    if (jarg7) {
      arg7 = (byte *) jenv->GetByteArrayElements(jarg7, 0);
      arg8 = (size_t) jenv->GetArrayLength(jarg7);
    } else {
      arg7 = 0;
      arg8 = 0;
    }
  }
  result = (BLST_ERROR)((blst::P2_Affine const *)arg1)->core_verify((blst::P1_Affine const &)*arg2,arg3,(byte const *)arg4,arg5,(std::string const &)*arg6,(byte const *)arg7,arg8);
  jresult = (jint)result; 
  {
    if (jarg4) jenv->ReleaseByteArrayElements(jarg4, (jbyte *)arg4, JNI_ABORT);
  }
  {
    if (jarg7) jenv->ReleaseByteArrayElements(jarg7, (jbyte *)arg7, JNI_ABORT);
  }
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_supranational_blst_blstJNI_P2_1Affine_1core_1verify_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2, jboolean jarg3, jbyteArray jarg4, jstring jarg6) {
  jint jresult = 0 ;
  blst::P2_Affine *arg1 = (blst::P2_Affine *) 0 ;
  blst::P1_Affine *arg2 = 0 ;
  bool arg3 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  std::string *arg6 = 0 ;
  BLST_ERROR result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P2_Affine *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  
  arg2 = jarg2 ? (blst::P1_Affine *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  arg3 = jarg3 ? true : false; 
  {
    if (jarg4) {
      arg4 = (byte *) jenv->GetByteArrayElements(jarg4, 0);
      arg5 = (size_t) jenv->GetArrayLength(jarg4);
    } else {
      arg4 = 0;
      arg5 = 0;
    }
  }
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  result = (BLST_ERROR)((blst::P2_Affine const *)arg1)->core_verify((blst::P1_Affine const &)*arg2,arg3,(byte const *)arg4,arg5,(std::string const &)*arg6);
  jresult = (jint)result; 
  {
    if (jarg4) jenv->ReleaseByteArrayElements(jarg4, (jbyte *)arg4, JNI_ABORT);
  }
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_supranational_blst_blstJNI_P2_1Affine_1core_1verify_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2, jboolean jarg3, jbyteArray jarg4) {
  jint jresult = 0 ;
  blst::P2_Affine *arg1 = (blst::P2_Affine *) 0 ;
  blst::P1_Affine *arg2 = 0 ;
  bool arg3 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  BLST_ERROR result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P2_Affine *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  
  arg2 = jarg2 ? (blst::P1_Affine *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  arg3 = jarg3 ? true : false; 
  {
    if (jarg4) {
      arg4 = (byte *) jenv->GetByteArrayElements(jarg4, 0);
      arg5 = (size_t) jenv->GetArrayLength(jarg4);
    } else {
      arg4 = 0;
      arg5 = 0;
    }
  }
  result = (BLST_ERROR)((blst::P2_Affine const *)arg1)->core_verify((blst::P1_Affine const &)*arg2,arg3,(byte const *)arg4,arg5);
  jresult = (jint)result; 
  {
    if (jarg4) jenv->ReleaseByteArrayElements(jarg4, (jbyte *)arg4, JNI_ABORT);
  }
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
  
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_P2_1Affine_1generator(JNIEnv *jenv, jclass jcls) {
  jlongArray jresult = 0 ;
  blst::P2_Affine result;
  
  (void)jenv;
  (void)jcls;
  result = blst::P2_Affine::generator();
  {
    size_t sz = (sizeof(blst::P2_Affine) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)&result);
  }
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_new_1P2_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlongArray jresult = 0 ;
  blst::P2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (blst::P2 *)new blst::P2();
  
  if (result != 0) {
    size_t sz = (sizeof(blst::P2) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)result);
  }
  
  delete result;
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_new_1P2_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jlongArray jresult = 0 ;
  blst::SecretKey *arg1 = 0 ;
  blst::P2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::SecretKey *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  result = (blst::P2 *)new blst::P2((blst::SecretKey const &)*arg1);
  
  if (result != 0) {
    size_t sz = (sizeof(blst::P2) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)result);
  }
  
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  delete result;
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_new_1P2_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jlongArray jresult = 0 ;
  byte *arg1 = (byte *) 0 ;
  size_t arg2 ;
  blst::P2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    if (jarg1) {
      arg1 = (byte *) jenv->GetByteArrayElements(jarg1, 0);
      arg2 = (size_t) jenv->GetArrayLength(jarg1);
    } else {
      arg1 = 0;
      arg2 = 0;
    }
  }
  try {
    result = (blst::P2 *)new blst::P2((byte const *)arg1,arg2);
  } catch(BLST_ERROR &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
      BLST_ERROR_str[_e]);
    
  }
  
  if (result != 0) {
    size_t sz = (sizeof(blst::P2) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)result);
  }
  
  {
    if (jarg1) jenv->ReleaseByteArrayElements(jarg1, (jbyte *)arg1, JNI_ABORT);
  }
  
  delete result;
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_new_1P2_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jlongArray jresult = 0 ;
  blst::P2_Affine *arg1 = 0 ;
  blst::P2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P2_Affine *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  result = (blst::P2 *)new blst::P2((blst::P2_Affine const &)*arg1);
  
  if (result != 0) {
    size_t sz = (sizeof(blst::P2) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)result);
  }
  
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  delete result;
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_P2_1to_1affine(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jlongArray jresult = 0 ;
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  blst::P2_Affine result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P2 *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  result = ((blst::P2 const *)arg1)->to_affine();
  {
    size_t sz = (sizeof(blst::P2_Affine) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)&result);
  }
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_supranational_blst_blstJNI_P2_1serialize(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jbyteArray jresult = 0 ;
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  byte *arg2 ;
  byte temp2[192] ;
  
  (void)jenv;
  (void)jcls;
  arg2 = temp2; 
  
  arg1 = jarg1 ? (blst::P2 *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  ((blst::P2 const *)arg1)->serialize(arg2);
  {
    jresult = JCALL(NewByteArray, 192);
    if (jresult != 0) {
      JCALL(SetByteArrayRegion, jresult, 0, 192, (const jbyte *)arg2);
    }
    
    
    
    
    
    
    
    
    
    
  }
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_supranational_blst_blstJNI_P2_1compress(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jbyteArray jresult = 0 ;
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  byte *arg2 ;
  byte temp2[96] ;
  
  (void)jenv;
  (void)jcls;
  arg2 = temp2; 
  
  arg1 = jarg1 ? (blst::P2 *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  ((blst::P2 const *)arg1)->compress(arg2);
  {
    jresult = JCALL(NewByteArray, 96);
    if (jresult != 0) {
      JCALL(SetByteArrayRegion, jresult, 0, 96, (const jbyte *)arg2);
    }
    
    
    
    
    
    
    
    
    
    
  }
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_supranational_blst_blstJNI_P2_1on_1curve(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jboolean jresult = 0 ;
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P2 *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  result = (bool)((blst::P2 const *)arg1)->on_curve();
  jresult = (jboolean)result; 
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_supranational_blst_blstJNI_P2_1in_1group(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jboolean jresult = 0 ;
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P2 *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  result = (bool)((blst::P2 const *)arg1)->in_group();
  jresult = (jboolean)result; 
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_supranational_blst_blstJNI_P2_1is_1inf(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jboolean jresult = 0 ;
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P2 *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  result = (bool)((blst::P2 const *)arg1)->is_inf();
  jresult = (jboolean)result; 
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_supranational_blst_blstJNI_P2_1is_1equal(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2) {
  jboolean jresult = 0 ;
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  blst::P2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P2 *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  
  arg2 = jarg2 ? (blst::P2 *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  result = (bool)((blst::P2 const *)arg1)->is_equal((blst::P2 const &)*arg2);
  jresult = (jboolean)result; 
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_P2_1aggregate(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2) {
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  blst::P2_Affine *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::P2 *)JCALL(GetLongArrayElements, jarg1, 0);
  
  
  arg2 = jarg2 ? (blst::P2_Affine *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  try {
    (arg1)->aggregate((blst::P2_Affine const &)*arg2);
  } catch(BLST_ERROR &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
      BLST_ERROR_str[_e]);
    
  }
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_P2_1sign_1with_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2) {
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  blst::SecretKey *arg2 = 0 ;
  blst::P2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::P2 *)JCALL(GetLongArrayElements, jarg1, 0);
  
  
  arg2 = jarg2 ? (blst::SecretKey *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  result = (blst::P2 *)(arg1)->sign_with((blst::SecretKey const &)*arg2);
  (void)result;
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_P2_1sign_1with_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2) {
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  blst::Scalar *arg2 = 0 ;
  blst::P2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::P2 *)JCALL(GetLongArrayElements, jarg1, 0);
  
  
  arg2 = jarg2 ? (blst::Scalar *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  result = (blst::P2 *)(arg1)->sign_with((blst::Scalar const &)*arg2);
  (void)result;
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_P2_1hash_1to_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jbyteArray jarg2, jstring jarg4, jbyteArray jarg5) {
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  byte *arg5 = (byte *) 0 ;
  size_t arg6 ;
  blst::P2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::P2 *)JCALL(GetLongArrayElements, jarg1, 0);
  
  {
    if (jarg2) {
      arg2 = (byte *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    if (jarg5) {
      arg5 = (byte *) jenv->GetByteArrayElements(jarg5, 0);
      arg6 = (size_t) jenv->GetArrayLength(jarg5);
    } else {
      arg5 = 0;
      arg6 = 0;
    }
  }
  result = (blst::P2 *)(arg1)->hash_to((byte const *)arg2,arg3,(std::string const &)*arg4,(byte const *)arg5,arg6);
  (void)result;
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, JNI_ABORT);
  }
  {
    if (jarg5) jenv->ReleaseByteArrayElements(jarg5, (jbyte *)arg5, JNI_ABORT);
  }
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_P2_1hash_1to_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jbyteArray jarg2, jstring jarg4) {
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  blst::P2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::P2 *)JCALL(GetLongArrayElements, jarg1, 0);
  
  {
    if (jarg2) {
      arg2 = (byte *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (blst::P2 *)(arg1)->hash_to((byte const *)arg2,arg3,(std::string const &)*arg4);
  (void)result;
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, JNI_ABORT);
  }
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_P2_1hash_1to_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jbyteArray jarg2) {
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  blst::P2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::P2 *)JCALL(GetLongArrayElements, jarg1, 0);
  
  {
    if (jarg2) {
      arg2 = (byte *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  result = (blst::P2 *)(arg1)->hash_to((byte const *)arg2,arg3);
  (void)result;
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, JNI_ABORT);
  }
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_P2_1encode_1to_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jbyteArray jarg2, jstring jarg4, jbyteArray jarg5) {
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  byte *arg5 = (byte *) 0 ;
  size_t arg6 ;
  blst::P2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::P2 *)JCALL(GetLongArrayElements, jarg1, 0);
  
  {
    if (jarg2) {
      arg2 = (byte *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    if (jarg5) {
      arg5 = (byte *) jenv->GetByteArrayElements(jarg5, 0);
      arg6 = (size_t) jenv->GetArrayLength(jarg5);
    } else {
      arg5 = 0;
      arg6 = 0;
    }
  }
  result = (blst::P2 *)(arg1)->encode_to((byte const *)arg2,arg3,(std::string const &)*arg4,(byte const *)arg5,arg6);
  (void)result;
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, JNI_ABORT);
  }
  {
    if (jarg5) jenv->ReleaseByteArrayElements(jarg5, (jbyte *)arg5, JNI_ABORT);
  }
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_P2_1encode_1to_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jbyteArray jarg2, jstring jarg4) {
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  blst::P2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::P2 *)JCALL(GetLongArrayElements, jarg1, 0);
  
  {
    if (jarg2) {
      arg2 = (byte *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (blst::P2 *)(arg1)->encode_to((byte const *)arg2,arg3,(std::string const &)*arg4);
  (void)result;
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, JNI_ABORT);
  }
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_P2_1encode_1to_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jbyteArray jarg2) {
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  blst::P2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::P2 *)JCALL(GetLongArrayElements, jarg1, 0);
  
  {
    if (jarg2) {
      arg2 = (byte *) jenv->GetByteArrayElements(jarg2, 0);
      arg3 = (size_t) jenv->GetArrayLength(jarg2);
    } else {
      arg2 = 0;
      arg3 = 0;
    }
  }
  result = (blst::P2 *)(arg1)->encode_to((byte const *)arg2,arg3);
  (void)result;
  {
    if (jarg2) jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg2, JNI_ABORT);
  }
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_P2_1mult_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jbyteArray jarg2) {
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  byte *arg2 = (byte *) 0 ;
  size_t arg3 ;
  blst::P2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::P2 *)JCALL(GetLongArrayElements, jarg1, 0);
  
  
  arg3 = JCALL(GetArrayLength, jarg2);
  arg2 = (byte *)alloca(arg3);
  JCALL(GetByteArrayRegion, jarg2, 0, arg3, (jbyte*)arg2);
  if (*(jbyte*)arg2 < 0) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException,
      "expecting unsigned value");
    return ;
  }
  {
    // BigInteger.toByteArray() emits big-endian, flip the order...
    size_t i, j;
    for(i=0, j=arg3-1; i<arg3/2; i++, j--) {
      byte t=arg2[i]; arg2[i]=arg2[j]; arg2[j]=t;
    }
  }
  if (arg2[arg3-1] == 0)
  arg3--;
  arg3 *= 8;
  
  result = (blst::P2 *)(arg1)->mult((byte const *)arg2,arg3);
  (void)result;
  
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_P2_1mult_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2) {
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  blst::Scalar *arg2 = 0 ;
  blst::P2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::P2 *)JCALL(GetLongArrayElements, jarg1, 0);
  
  
  arg2 = jarg2 ? (blst::Scalar *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  result = (blst::P2 *)(arg1)->mult((blst::Scalar const &)*arg2);
  (void)result;
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_P2_1cneg(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jboolean jarg2) {
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  bool arg2 ;
  blst::P2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::P2 *)JCALL(GetLongArrayElements, jarg1, 0);
  
  arg2 = jarg2 ? true : false; 
  result = (blst::P2 *)(arg1)->cneg(arg2);
  (void)result;
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_P2_1neg(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  blst::P2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::P2 *)JCALL(GetLongArrayElements, jarg1, 0);
  
  result = (blst::P2 *)(arg1)->neg();
  (void)result;
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_P2_1add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2) {
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  blst::P2 *arg2 = 0 ;
  blst::P2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::P2 *)JCALL(GetLongArrayElements, jarg1, 0);
  
  
  arg2 = jarg2 ? (blst::P2 *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  result = (blst::P2 *)(arg1)->add((blst::P2 const &)*arg2);
  (void)result;
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_P2_1add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2) {
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  blst::P2_Affine *arg2 = 0 ;
  blst::P2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::P2 *)JCALL(GetLongArrayElements, jarg1, 0);
  
  
  arg2 = jarg2 ? (blst::P2_Affine *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  result = (blst::P2 *)(arg1)->add((blst::P2_Affine const &)*arg2);
  (void)result;
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_P2_1dbl(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  blst::P2 *arg1 = (blst::P2 *) 0 ;
  blst::P2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::P2 *)JCALL(GetLongArrayElements, jarg1, 0);
  
  result = (blst::P2 *)(arg1)->dbl();
  (void)result;
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_P2_1generator(JNIEnv *jenv, jclass jcls) {
  jlongArray jresult = 0 ;
  blst::P2 result;
  
  (void)jenv;
  (void)jcls;
  result = blst::P2::generator();
  {
    size_t sz = (sizeof(blst::P2) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)&result);
  }
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_G1(JNIEnv *jenv, jclass jcls) {
  jlongArray jresult = 0 ;
  blst::P1 result;
  
  (void)jenv;
  (void)jcls;
  result = blst::G1();
  {
    size_t sz = (sizeof(blst::P1) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)&result);
  }
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_G2(JNIEnv *jenv, jclass jcls) {
  jlongArray jresult = 0 ;
  blst::P2 result;
  
  (void)jenv;
  (void)jcls;
  result = blst::G2();
  {
    size_t sz = (sizeof(blst::P2) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)&result);
  }
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_new_1PT_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jlongArray jresult = 0 ;
  blst::P1_Affine *arg1 = 0 ;
  blst::PT *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P1_Affine *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  result = (blst::PT *)new blst::PT((blst::P1_Affine const &)*arg1);
  
  if (result != 0) {
    size_t sz = (sizeof(blst::PT) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)result);
  }
  
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  delete result;
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_new_1PT_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jlongArray jresult = 0 ;
  blst::P2_Affine *arg1 = 0 ;
  blst::PT *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P2_Affine *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  result = (blst::PT *)new blst::PT((blst::P2_Affine const &)*arg1);
  
  if (result != 0) {
    size_t sz = (sizeof(blst::PT) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)result);
  }
  
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  delete result;
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_new_1PT_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2) {
  jlongArray jresult = 0 ;
  blst::P2_Affine *arg1 = 0 ;
  blst::P1_Affine *arg2 = 0 ;
  blst::PT *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::P2_Affine *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  
  arg2 = jarg2 ? (blst::P1_Affine *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  result = (blst::PT *)new blst::PT((blst::P2_Affine const &)*arg1,(blst::P1_Affine const &)*arg2);
  
  if (result != 0) {
    size_t sz = (sizeof(blst::PT) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)result);
  }
  
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
  delete result;
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_supranational_blst_blstJNI_PT_1is_1one(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jboolean jresult = 0 ;
  blst::PT *arg1 = (blst::PT *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::PT *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  result = (bool)((blst::PT const *)arg1)->is_one();
  jresult = (jboolean)result; 
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_supranational_blst_blstJNI_PT_1is_1equal(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2) {
  jboolean jresult = 0 ;
  blst::PT *arg1 = (blst::PT *) 0 ;
  blst::PT *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::PT *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  
  arg2 = jarg2 ? (blst::PT *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  result = (bool)((blst::PT const *)arg1)->is_equal((blst::PT const &)*arg2);
  jresult = (jboolean)result; 
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_PT_1sqr(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  blst::PT *arg1 = (blst::PT *) 0 ;
  blst::PT *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::PT *)JCALL(GetLongArrayElements, jarg1, 0);
  
  result = (blst::PT *)(arg1)->sqr();
  (void)result;
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_PT_1mul(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2) {
  blst::PT *arg1 = (blst::PT *) 0 ;
  blst::PT *arg2 = 0 ;
  blst::PT *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::PT *)JCALL(GetLongArrayElements, jarg1, 0);
  
  
  arg2 = jarg2 ? (blst::PT *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  result = (blst::PT *)(arg1)->mul((blst::PT const &)*arg2);
  (void)result;
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_PT_1final_1exp(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  blst::PT *arg1 = (blst::PT *) 0 ;
  blst::PT *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::PT *)JCALL(GetLongArrayElements, jarg1, 0);
  
  result = (blst::PT *)(arg1)->final_exp();
  (void)result;
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
}


SWIGEXPORT jboolean JNICALL Java_supranational_blst_blstJNI_PT_1finalverify(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2) {
  jboolean jresult = 0 ;
  blst::PT *arg1 = 0 ;
  blst::PT *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::PT *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  
  arg2 = jarg2 ? (blst::PT *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  result = (bool)blst::PT::finalverify((blst::PT const &)*arg1,(blst::PT const &)*arg2);
  jresult = (jboolean)result; 
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_supranational_blst_blstJNI_Pairing_1aggregate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2, jlongArray jarg3, jbyteArray jarg4, jbyteArray jarg6) {
  jint jresult = 0 ;
  blst::Pairing *arg1 = (blst::Pairing *) 0 ;
  blst::P1_Affine *arg2 = (blst::P1_Affine *) 0 ;
  blst::P2_Affine *arg3 = (blst::P2_Affine *) 0 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  byte *arg6 = (byte *) 0 ;
  size_t arg7 ;
  BLST_ERROR result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::Pairing *)JCALL(GetLongArrayElements, jarg1, 0);
  
  
  arg2 = jarg2 ? (blst::P1_Affine *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  
  arg3 = jarg3 ? (blst::P2_Affine *)JCALL(GetLongArrayElements, jarg3, 0) : NULL;
  
  {
    if (jarg4) {
      arg4 = (byte *) jenv->GetByteArrayElements(jarg4, 0);
      arg5 = (size_t) jenv->GetArrayLength(jarg4);
    } else {
      arg4 = 0;
      arg5 = 0;
    }
  }
  {
    if (jarg6) {
      arg6 = (byte *) jenv->GetByteArrayElements(jarg6, 0);
      arg7 = (size_t) jenv->GetArrayLength(jarg6);
    } else {
      arg6 = 0;
      arg7 = 0;
    }
  }
  result = (BLST_ERROR)(arg1)->aggregate((blst::P1_Affine const *)arg2,(blst::P2_Affine const *)arg3,(byte const *)arg4,arg5,(byte const *)arg6,arg7);
  jresult = (jint)result; 
  {
    if (jarg4) jenv->ReleaseByteArrayElements(jarg4, (jbyte *)arg4, JNI_ABORT);
  }
  {
    if (jarg6) jenv->ReleaseByteArrayElements(jarg6, (jbyte *)arg6, JNI_ABORT);
  }
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
  
  if (jarg3) JCALL(ReleaseLongArrayElements, jarg3, (jlong *)arg3, JNI_ABORT);
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_supranational_blst_blstJNI_Pairing_1aggregate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2, jlongArray jarg3, jbyteArray jarg4) {
  jint jresult = 0 ;
  blst::Pairing *arg1 = (blst::Pairing *) 0 ;
  blst::P1_Affine *arg2 = (blst::P1_Affine *) 0 ;
  blst::P2_Affine *arg3 = (blst::P2_Affine *) 0 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  BLST_ERROR result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::Pairing *)JCALL(GetLongArrayElements, jarg1, 0);
  
  
  arg2 = jarg2 ? (blst::P1_Affine *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  
  arg3 = jarg3 ? (blst::P2_Affine *)JCALL(GetLongArrayElements, jarg3, 0) : NULL;
  
  {
    if (jarg4) {
      arg4 = (byte *) jenv->GetByteArrayElements(jarg4, 0);
      arg5 = (size_t) jenv->GetArrayLength(jarg4);
    } else {
      arg4 = 0;
      arg5 = 0;
    }
  }
  result = (BLST_ERROR)(arg1)->aggregate((blst::P1_Affine const *)arg2,(blst::P2_Affine const *)arg3,(byte const *)arg4,arg5);
  jresult = (jint)result; 
  {
    if (jarg4) jenv->ReleaseByteArrayElements(jarg4, (jbyte *)arg4, JNI_ABORT);
  }
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
  
  if (jarg3) JCALL(ReleaseLongArrayElements, jarg3, (jlong *)arg3, JNI_ABORT);
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_supranational_blst_blstJNI_Pairing_1aggregate_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2, jlongArray jarg3, jbyteArray jarg4, jbyteArray jarg6) {
  jint jresult = 0 ;
  blst::Pairing *arg1 = (blst::Pairing *) 0 ;
  blst::P2_Affine *arg2 = (blst::P2_Affine *) 0 ;
  blst::P1_Affine *arg3 = (blst::P1_Affine *) 0 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  byte *arg6 = (byte *) 0 ;
  size_t arg7 ;
  BLST_ERROR result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::Pairing *)JCALL(GetLongArrayElements, jarg1, 0);
  
  
  arg2 = jarg2 ? (blst::P2_Affine *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  
  arg3 = jarg3 ? (blst::P1_Affine *)JCALL(GetLongArrayElements, jarg3, 0) : NULL;
  
  {
    if (jarg4) {
      arg4 = (byte *) jenv->GetByteArrayElements(jarg4, 0);
      arg5 = (size_t) jenv->GetArrayLength(jarg4);
    } else {
      arg4 = 0;
      arg5 = 0;
    }
  }
  {
    if (jarg6) {
      arg6 = (byte *) jenv->GetByteArrayElements(jarg6, 0);
      arg7 = (size_t) jenv->GetArrayLength(jarg6);
    } else {
      arg6 = 0;
      arg7 = 0;
    }
  }
  result = (BLST_ERROR)(arg1)->aggregate((blst::P2_Affine const *)arg2,(blst::P1_Affine const *)arg3,(byte const *)arg4,arg5,(byte const *)arg6,arg7);
  jresult = (jint)result; 
  {
    if (jarg4) jenv->ReleaseByteArrayElements(jarg4, (jbyte *)arg4, JNI_ABORT);
  }
  {
    if (jarg6) jenv->ReleaseByteArrayElements(jarg6, (jbyte *)arg6, JNI_ABORT);
  }
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
  
  if (jarg3) JCALL(ReleaseLongArrayElements, jarg3, (jlong *)arg3, JNI_ABORT);
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_supranational_blst_blstJNI_Pairing_1aggregate_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2, jlongArray jarg3, jbyteArray jarg4) {
  jint jresult = 0 ;
  blst::Pairing *arg1 = (blst::Pairing *) 0 ;
  blst::P2_Affine *arg2 = (blst::P2_Affine *) 0 ;
  blst::P1_Affine *arg3 = (blst::P1_Affine *) 0 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  BLST_ERROR result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::Pairing *)JCALL(GetLongArrayElements, jarg1, 0);
  
  
  arg2 = jarg2 ? (blst::P2_Affine *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  
  arg3 = jarg3 ? (blst::P1_Affine *)JCALL(GetLongArrayElements, jarg3, 0) : NULL;
  
  {
    if (jarg4) {
      arg4 = (byte *) jenv->GetByteArrayElements(jarg4, 0);
      arg5 = (size_t) jenv->GetArrayLength(jarg4);
    } else {
      arg4 = 0;
      arg5 = 0;
    }
  }
  result = (BLST_ERROR)(arg1)->aggregate((blst::P2_Affine const *)arg2,(blst::P1_Affine const *)arg3,(byte const *)arg4,arg5);
  jresult = (jint)result; 
  {
    if (jarg4) jenv->ReleaseByteArrayElements(jarg4, (jbyte *)arg4, JNI_ABORT);
  }
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
  
  if (jarg3) JCALL(ReleaseLongArrayElements, jarg3, (jlong *)arg3, JNI_ABORT);
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_supranational_blst_blstJNI_Pairing_1mul_1n_1aggregate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2, jlongArray jarg3, jbyteArray jarg4, jbyteArray jarg6, jbyteArray jarg8) {
  jint jresult = 0 ;
  blst::Pairing *arg1 = (blst::Pairing *) 0 ;
  blst::P1_Affine *arg2 = (blst::P1_Affine *) 0 ;
  blst::P2_Affine *arg3 = (blst::P2_Affine *) 0 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  byte *arg6 = (byte *) 0 ;
  size_t arg7 ;
  byte *arg8 = (byte *) 0 ;
  size_t arg9 ;
  BLST_ERROR result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::Pairing *)JCALL(GetLongArrayElements, jarg1, 0);
  
  
  arg2 = jarg2 ? (blst::P1_Affine *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  
  arg3 = jarg3 ? (blst::P2_Affine *)JCALL(GetLongArrayElements, jarg3, 0) : NULL;
  
  
  arg5 = JCALL(GetArrayLength, jarg4);
  arg4 = (byte *)alloca(arg5);
  JCALL(GetByteArrayRegion, jarg4, 0, arg5, (jbyte*)arg4);
  if (*(jbyte*)arg4 < 0) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException,
      "expecting unsigned value");
    return 0;
  }
  {
    // BigInteger.toByteArray() emits big-endian, flip the order...
    size_t i, j;
    for(i=0, j=arg5-1; i<arg5/2; i++, j--) {
      byte t=arg4[i]; arg4[i]=arg4[j]; arg4[j]=t;
    }
  }
  if (arg4[arg5-1] == 0)
  arg5--;
  arg5 *= 8;
  
  {
    if (jarg6) {
      arg6 = (byte *) jenv->GetByteArrayElements(jarg6, 0);
      arg7 = (size_t) jenv->GetArrayLength(jarg6);
    } else {
      arg6 = 0;
      arg7 = 0;
    }
  }
  {
    if (jarg8) {
      arg8 = (byte *) jenv->GetByteArrayElements(jarg8, 0);
      arg9 = (size_t) jenv->GetArrayLength(jarg8);
    } else {
      arg8 = 0;
      arg9 = 0;
    }
  }
  result = (BLST_ERROR)(arg1)->mul_n_aggregate((blst::P1_Affine const *)arg2,(blst::P2_Affine const *)arg3,(byte const *)arg4,arg5,(byte const *)arg6,arg7,(byte const *)arg8,arg9);
  jresult = (jint)result; 
  
  {
    if (jarg6) jenv->ReleaseByteArrayElements(jarg6, (jbyte *)arg6, JNI_ABORT);
  }
  {
    if (jarg8) jenv->ReleaseByteArrayElements(jarg8, (jbyte *)arg8, JNI_ABORT);
  }
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
  
  if (jarg3) JCALL(ReleaseLongArrayElements, jarg3, (jlong *)arg3, JNI_ABORT);
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_supranational_blst_blstJNI_Pairing_1mul_1n_1aggregate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2, jlongArray jarg3, jbyteArray jarg4, jbyteArray jarg6) {
  jint jresult = 0 ;
  blst::Pairing *arg1 = (blst::Pairing *) 0 ;
  blst::P1_Affine *arg2 = (blst::P1_Affine *) 0 ;
  blst::P2_Affine *arg3 = (blst::P2_Affine *) 0 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  byte *arg6 = (byte *) 0 ;
  size_t arg7 ;
  BLST_ERROR result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::Pairing *)JCALL(GetLongArrayElements, jarg1, 0);
  
  
  arg2 = jarg2 ? (blst::P1_Affine *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  
  arg3 = jarg3 ? (blst::P2_Affine *)JCALL(GetLongArrayElements, jarg3, 0) : NULL;
  
  
  arg5 = JCALL(GetArrayLength, jarg4);
  arg4 = (byte *)alloca(arg5);
  JCALL(GetByteArrayRegion, jarg4, 0, arg5, (jbyte*)arg4);
  if (*(jbyte*)arg4 < 0) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException,
      "expecting unsigned value");
    return 0;
  }
  {
    // BigInteger.toByteArray() emits big-endian, flip the order...
    size_t i, j;
    for(i=0, j=arg5-1; i<arg5/2; i++, j--) {
      byte t=arg4[i]; arg4[i]=arg4[j]; arg4[j]=t;
    }
  }
  if (arg4[arg5-1] == 0)
  arg5--;
  arg5 *= 8;
  
  {
    if (jarg6) {
      arg6 = (byte *) jenv->GetByteArrayElements(jarg6, 0);
      arg7 = (size_t) jenv->GetArrayLength(jarg6);
    } else {
      arg6 = 0;
      arg7 = 0;
    }
  }
  result = (BLST_ERROR)(arg1)->mul_n_aggregate((blst::P1_Affine const *)arg2,(blst::P2_Affine const *)arg3,(byte const *)arg4,arg5,(byte const *)arg6,arg7);
  jresult = (jint)result; 
  
  {
    if (jarg6) jenv->ReleaseByteArrayElements(jarg6, (jbyte *)arg6, JNI_ABORT);
  }
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
  
  if (jarg3) JCALL(ReleaseLongArrayElements, jarg3, (jlong *)arg3, JNI_ABORT);
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_supranational_blst_blstJNI_Pairing_1mul_1n_1aggregate_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2, jlongArray jarg3, jbyteArray jarg4, jbyteArray jarg6, jbyteArray jarg8) {
  jint jresult = 0 ;
  blst::Pairing *arg1 = (blst::Pairing *) 0 ;
  blst::P2_Affine *arg2 = (blst::P2_Affine *) 0 ;
  blst::P1_Affine *arg3 = (blst::P1_Affine *) 0 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  byte *arg6 = (byte *) 0 ;
  size_t arg7 ;
  byte *arg8 = (byte *) 0 ;
  size_t arg9 ;
  BLST_ERROR result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::Pairing *)JCALL(GetLongArrayElements, jarg1, 0);
  
  
  arg2 = jarg2 ? (blst::P2_Affine *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  
  arg3 = jarg3 ? (blst::P1_Affine *)JCALL(GetLongArrayElements, jarg3, 0) : NULL;
  
  
  arg5 = JCALL(GetArrayLength, jarg4);
  arg4 = (byte *)alloca(arg5);
  JCALL(GetByteArrayRegion, jarg4, 0, arg5, (jbyte*)arg4);
  if (*(jbyte*)arg4 < 0) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException,
      "expecting unsigned value");
    return 0;
  }
  {
    // BigInteger.toByteArray() emits big-endian, flip the order...
    size_t i, j;
    for(i=0, j=arg5-1; i<arg5/2; i++, j--) {
      byte t=arg4[i]; arg4[i]=arg4[j]; arg4[j]=t;
    }
  }
  if (arg4[arg5-1] == 0)
  arg5--;
  arg5 *= 8;
  
  {
    if (jarg6) {
      arg6 = (byte *) jenv->GetByteArrayElements(jarg6, 0);
      arg7 = (size_t) jenv->GetArrayLength(jarg6);
    } else {
      arg6 = 0;
      arg7 = 0;
    }
  }
  {
    if (jarg8) {
      arg8 = (byte *) jenv->GetByteArrayElements(jarg8, 0);
      arg9 = (size_t) jenv->GetArrayLength(jarg8);
    } else {
      arg8 = 0;
      arg9 = 0;
    }
  }
  result = (BLST_ERROR)(arg1)->mul_n_aggregate((blst::P2_Affine const *)arg2,(blst::P1_Affine const *)arg3,(byte const *)arg4,arg5,(byte const *)arg6,arg7,(byte const *)arg8,arg9);
  jresult = (jint)result; 
  
  {
    if (jarg6) jenv->ReleaseByteArrayElements(jarg6, (jbyte *)arg6, JNI_ABORT);
  }
  {
    if (jarg8) jenv->ReleaseByteArrayElements(jarg8, (jbyte *)arg8, JNI_ABORT);
  }
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
  
  if (jarg3) JCALL(ReleaseLongArrayElements, jarg3, (jlong *)arg3, JNI_ABORT);
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_supranational_blst_blstJNI_Pairing_1mul_1n_1aggregate_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2, jlongArray jarg3, jbyteArray jarg4, jbyteArray jarg6) {
  jint jresult = 0 ;
  blst::Pairing *arg1 = (blst::Pairing *) 0 ;
  blst::P2_Affine *arg2 = (blst::P2_Affine *) 0 ;
  blst::P1_Affine *arg3 = (blst::P1_Affine *) 0 ;
  byte *arg4 = (byte *) 0 ;
  size_t arg5 ;
  byte *arg6 = (byte *) 0 ;
  size_t arg7 ;
  BLST_ERROR result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::Pairing *)JCALL(GetLongArrayElements, jarg1, 0);
  
  
  arg2 = jarg2 ? (blst::P2_Affine *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  
  arg3 = jarg3 ? (blst::P1_Affine *)JCALL(GetLongArrayElements, jarg3, 0) : NULL;
  
  
  arg5 = JCALL(GetArrayLength, jarg4);
  arg4 = (byte *)alloca(arg5);
  JCALL(GetByteArrayRegion, jarg4, 0, arg5, (jbyte*)arg4);
  if (*(jbyte*)arg4 < 0) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException,
      "expecting unsigned value");
    return 0;
  }
  {
    // BigInteger.toByteArray() emits big-endian, flip the order...
    size_t i, j;
    for(i=0, j=arg5-1; i<arg5/2; i++, j--) {
      byte t=arg4[i]; arg4[i]=arg4[j]; arg4[j]=t;
    }
  }
  if (arg4[arg5-1] == 0)
  arg5--;
  arg5 *= 8;
  
  {
    if (jarg6) {
      arg6 = (byte *) jenv->GetByteArrayElements(jarg6, 0);
      arg7 = (size_t) jenv->GetArrayLength(jarg6);
    } else {
      arg6 = 0;
      arg7 = 0;
    }
  }
  result = (BLST_ERROR)(arg1)->mul_n_aggregate((blst::P2_Affine const *)arg2,(blst::P1_Affine const *)arg3,(byte const *)arg4,arg5,(byte const *)arg6,arg7);
  jresult = (jint)result; 
  
  {
    if (jarg6) jenv->ReleaseByteArrayElements(jarg6, (jbyte *)arg6, JNI_ABORT);
  }
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
  
  if (jarg3) JCALL(ReleaseLongArrayElements, jarg3, (jlong *)arg3, JNI_ABORT);
  
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_supranational_blst_blstJNI_Pairing_1commit(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  blst::Pairing *arg1 = (blst::Pairing *) 0 ;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::Pairing *)JCALL(GetLongArrayElements, jarg1, 0);
  
  (arg1)->commit();
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
}


SWIGEXPORT jint JNICALL Java_supranational_blst_blstJNI_Pairing_1merge(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2) {
  jint jresult = 0 ;
  blst::Pairing *arg1 = (blst::Pairing *) 0 ;
  blst::Pairing *arg2 = (blst::Pairing *) 0 ;
  BLST_ERROR result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = (blst::Pairing *)JCALL(GetLongArrayElements, jarg1, 0);
  
  
  arg2 = jarg2 ? (blst::Pairing *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  result = (BLST_ERROR)(arg1)->merge((blst::Pairing const *)arg2);
  jresult = (jint)result; 
  
  JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, 0);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_supranational_blst_blstJNI_Pairing_1finalverify_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jlongArray jarg2) {
  jboolean jresult = 0 ;
  blst::Pairing *arg1 = (blst::Pairing *) 0 ;
  blst::PT *arg2 = (blst::PT *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::Pairing *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  
  arg2 = jarg2 ? (blst::PT *)JCALL(GetLongArrayElements, jarg2, 0) : NULL;
  
  result = (bool)((blst::Pairing const *)arg1)->finalverify((blst::PT const *)arg2);
  jresult = (jboolean)result; 
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  
  if (jarg2) JCALL(ReleaseLongArrayElements, jarg2, (jlong *)arg2, JNI_ABORT);
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_supranational_blst_blstJNI_Pairing_1finalverify_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlongArray jarg1) {
  jboolean jresult = 0 ;
  blst::Pairing *arg1 = (blst::Pairing *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  
  arg1 = jarg1 ? (blst::Pairing *)JCALL(GetLongArrayElements, jarg1, 0) : NULL;
  
  result = (bool)((blst::Pairing const *)arg1)->finalverify();
  jresult = (jboolean)result; 
  
  if (jarg1) JCALL(ReleaseLongArrayElements, jarg1, (jlong *)arg1, JNI_ABORT);
  
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_new_1Pairing(JNIEnv *jenv, jclass jcls, jboolean jarg1, jstring jarg2) {
  jlongArray jresult = 0 ;
  bool arg1 ;
  std::string *arg2 = 0 ;
  blst::Pairing *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (blst::Pairing *)new_blst_Pairing(arg1,(std::string const &)*arg2);
  {
    size_t sz = blst_pairing_sizeof();
    size_t SZ = (sz + arg2->size() + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, SZ);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, SZ, (const jlong *)result);
  }
  
  free(result);
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_BLS12_1381_1G1_1get(JNIEnv *jenv, jclass jcls) {
  jlongArray jresult = 0 ;
  blst::P1_Affine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (blst::P1_Affine *)&BLS12_381_G1;
  
  if (result != 0) {
    size_t sz = (sizeof(blst::P1_Affine) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)result);
  }
  
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_BLS12_1381_1NEG_1G1_1get(JNIEnv *jenv, jclass jcls) {
  jlongArray jresult = 0 ;
  blst::P1_Affine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (blst::P1_Affine *)&BLS12_381_NEG_G1;
  
  if (result != 0) {
    size_t sz = (sizeof(blst::P1_Affine) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)result);
  }
  
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_BLS12_1381_1G2_1get(JNIEnv *jenv, jclass jcls) {
  jlongArray jresult = 0 ;
  blst::P2_Affine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (blst::P2_Affine *)&BLS12_381_G2;
  
  if (result != 0) {
    size_t sz = (sizeof(blst::P2_Affine) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)result);
  }
  
  return jresult;
}


SWIGEXPORT jlongArray JNICALL Java_supranational_blst_blstJNI_BLS12_1381_1NEG_1G2_1get(JNIEnv *jenv, jclass jcls) {
  jlongArray jresult = 0 ;
  blst::P2_Affine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (blst::P2_Affine *)&BLS12_381_NEG_G2;
  
  if (result != 0) {
    size_t sz = (sizeof(blst::P2_Affine) + sizeof(jlong) - 1)/sizeof(jlong);
    jresult = JCALL(NewLongArray, sz);
    if (jresult != 0)
    JCALL(SetLongArrayRegion, jresult, 0, sz, (const jlong *)result);
  }
  
  return jresult;
}


#ifdef __cplusplus
}
#endif

